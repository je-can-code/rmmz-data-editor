name: ci - Build & Test & Upload Artifact

on:
  workflow_call:
    # these variables must be captured as outputs so they are usable for external steps.
    outputs:
      ARTIFACT_PATH:
        value: ${{ jobs.ci.outputs.ARTIFACT_PATH }}
      ARTIFACT_NAME:
        value: ${{ jobs.ci.outputs.ARTIFACT_NAME }}
      ARTIFACT_FILE:
        value: ${{ jobs.ci.outputs.ARTIFACT_FILE }}

jobs:
  # build, test, and upload the artifact if successful.
  ci:
    # I choose ubuntu mostly because it loads and executes the steps in like 20% the time windows-latest did.
    runs-on: ubuntu-latest
    
    # The environment variables that are used throughout this step.
    env:
      SOLUTION_PATH: ./J-EmZee.sln
      APP_PROJECT_PATH: ./src/Dashboard/Dashboard.csproj
      TEST_PROJECT_PATH: ./test/Rmmz.Data/Rmmz.Data.Tests.csproj
      ARTIFACT_PATH: ./out
      ARTIFACT_NAME: artifact
      ARTIFACT_FILE: artifact.zip

      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      DOTNET_NOLOGO: true
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
    
    outputs:
      ARTIFACT_PATH: ${{ env.ARTIFACT_PATH }}
      ARTIFACT_NAME: ${{ env.ARTIFACT_NAME }}
      ARTIFACT_FILE: ${{ env.ARTIFACT_FILE }}

    steps:
      # Download your repository to the runner.
      - name: Checkout
        uses: actions/checkout@v3

      # Install .NET onto the runner.
      - name: Install .NET
        id: install_dotnet
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
          cache: true

      # Restore all dependencies to the solution.
      - name: Restore dependencies
        run: dotnet restore --locked-mode

      # Build all projects of the solution (without implicit restore).
      - name: Build solution
        run: dotnet build --no-restore

      # Run all tests of the solution (without implicit restore or build).
      - name: Run tests
        # run: dotnet test --no-restore --no-build
        run: dotnet test --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./.coverage

      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: ./.coverage/**/coverage.cobertura.xml
          badge: true
          fail_below_min: false # should be TRUE.
          format: markdown # can be 'text' too.
          hide_branch_rate: false
          hide_complexity: false
          indicators: true
          output: both
          thresholds: '0 80' # should be '60 80' or better.

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md
      
      # Create the output directory ahead of publishing- can't publish to a place that doesn't exist!.
      # - name: Make output directory
      #   run: mkdir $ARTIFACT_PATH
      
      # Compile the app with an arbitrary selection of options.
      # The selection from top to bottom: the path to the main project, the output path, the configuration type,
      # the runtime target, and the last three together enforce "1-file publishing" (plus the debug files).
      - name: Compile app
        run: >-
          dotnet publish $APP_PROJECT_PATH
          -o $ARTIFACT_PATH
          -c Release
          -r win-x64
          --self-contained true
          -p:PublishSingleFile=true
          -p:IncludeNativeLibrariesForSelfExtract=true
      
      # Zip up the app output into a regular .zip archive, so all files are together and compressed.
      - name: Zip app
        run: zip -r $ARTIFACT_FILE $ARTIFACT_PATH

      # Expose the archive as an artifact for download or use in further jobs.
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: ${{ env.ARTIFACT_FILE }}
          retention-days: 2